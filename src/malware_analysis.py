import os
import hashlib
import magic
import pefile
import time
from colorama import init, Fore, Style
from datetime import datetime

# Initialize colorama for Windows
init()


class MalwareAnalyzer:
    def __init__(self):
        self.results = {}

    def analyze_file(self, file_path):
        """Main analysis function"""
        if not os.path.exists(file_path):
            print(f"{Fore.RED}[-]{Style.RESET_ALL} File not found: {file_path}")
            return None

        print(f"\n{Fore.BLUE}[*]{Style.RESET_ALL} Starting analysis of: {file_path}")
        self.results = {
            "filename": os.path.basename(file_path),
            "size": os.path.getsize(file_path),
            "timestamps": self.get_timestamps(file_path),
            "hashes": self.calculate_hashes(file_path),
            "file_type": self.get_file_type(file_path),
            "strings": self.extract_strings(file_path),
            "pe_info": (
                self.analyze_pe(file_path) if self.is_pe_file(file_path) else None
            ),
            "pattern_matches": self.check_patterns(file_path),
        }
        return self.results

    def calculate_hashes(self, file_path):
        """Calculate different hashes of the file"""
        print(f"{Fore.BLUE}[*]{Style.RESET_ALL} Calculating hashes...")

        with open(file_path, "rb") as f:
            data = f.read()
            return {
                "md5": hashlib.md5(data).hexdigest(),
                "sha1": hashlib.sha1(data).hexdigest(),
                "sha256": hashlib.sha256(data).hexdigest(),
            }

    def get_file_type(self, file_path):
        """Determine file type using magic"""
        try:
            return magic.from_file(file_path)
        except:
            return "Unknown"

    def get_timestamps(self, file_path):
        """Get file timestamps"""
        return {
            "created": datetime.fromtimestamp(os.path.getctime(file_path)).strftime(
                "%Y-%m-%d %H:%M:%S"
            ),
            "modified": datetime.fromtimestamp(os.path.getmtime(file_path)).strftime(
                "%Y-%m-%d %H:%M:%S"
            ),
            "accessed": datetime.fromtimestamp(os.path.getatime(file_path)).strftime(
                "%Y-%m-%d %H:%M:%S"
            ),
        }

    def is_pe_file(self, file_path):
        """Check if file is a PE file"""
        try:
            pefile.PE(file_path)
            return True
        except:
            return False

    def analyze_pe(self, file_path):
        """Analyze PE file structure"""
        print(f"{Fore.BLUE}[*]{Style.RESET_ALL} Analyzing PE structure...")
        try:
            pe = pefile.PE(file_path)
            return {
                "machine_type": hex(pe.FILE_HEADER.Machine),
                "timestamp": datetime.fromtimestamp(
                    pe.FILE_HEADER.TimeDateStamp
                ).strftime("%Y-%m-%d %H:%M:%S"),
                "subsystem": hex(pe.OPTIONAL_HEADER.Subsystem),
                "dll_characteristics": hex(pe.OPTIONAL_HEADER.DllCharacteristics),
                "imports": self.get_imports(pe),
                "sections": self.get_sections(pe),
            }
        except Exception as e:
            print(f"{Fore.RED}[-]{Style.RESET_ALL} PE analysis error: {str(e)}")
            return None

    def get_imports(self, pe):
        """Get imported functions"""
        imports = {}
        try:
            for entry in pe.DIRECTORY_ENTRY_IMPORT:
                imports[entry.dll.decode()] = [
                    func.name.decode() for func in entry.imports if func.name
                ]
        except Exception as e:
            print(f"{Fore.RED}[-]{Style.RESET_ALL} Error getting imports: {str(e)}")
        return imports

    def get_sections(self, pe):
        """Get section information"""
        return [
            {
                "name": section.Name.decode().rstrip("\x00"),
                "size": hex(section.SizeOfRawData),
                "entropy": section.get_entropy(),
            }
            for section in pe.sections
        ]

    def extract_strings(self, file_path, min_length=4):
        """Extract ASCII and Unicode strings"""
        print(f"{Fore.BLUE}[*]{Style.RESET_ALL} Extracting strings...")
        strings = []
        try:
            with open(file_path, "rb") as f:
                data = f.read()
        except Exception as e:
            print(f"{Fore.RED}[-]{Style.RESET_ALL} Error extracting strings: {str(e)}")
            return strings
        return strings

    def check_patterns(self, file_path):
        """Check file against known malicious patterns"""
        print(f"{Fore.BLUE}[*]{Style.RESET_ALL} Checking for suspicious patterns...")

        patterns = {
            "potential_shellcode": [
                b"\x55\x8b\xec",
                b"\x33\xc0",
            ],  # Common x86 patterns
            "possible_backdoor": [b"cmd.exe", b"powershell.exe"],
            "suspicious_apis": [
                b"CreateRemoteThread",
                b"VirtualAlloc",
                b"WriteProcessMemory",
            ],
            "network_indicators": [b"http://", b"https://", b"ws://", b"wss://"],
            "suspicious_strings": [b"botnet", b"keylog", b"RAT", b"rootkit"],
        }

        matches = []
        try:
            with open(file_path, "rb") as f:
                content = f.read()
                for category, pattern_list in patterns.items():
                    for pattern in pattern_list:
                        if pattern in content:
                            matches.append(
                                f"{category}: {pattern.decode('utf-8', errors='ignore')}"
                            )
        except Exception as e:
            print(f"{Fore.RED}[-]{Style.RESET_ALL} Pattern matching error: {str(e)}")

        return matches

    def print_results(self):
        """Print analysis results"""
        if not self.results:
            print(f"{Fore.RED}[-]{Style.RESET_ALL} No results to display")
            return

        print(f"\n{Fore.GREEN}[+]{Style.RESET_ALL} Analysis Results:")
        print(f"\n{Fore.YELLOW}[*]{Style.RESET_ALL} Basic Information:")
        print(f"  Filename: {self.results['filename']}")
        print(f"  Size: {self.results['size']} bytes")
        print(f"  Type: {self.results['file_type']}")

        print(f"\n{Fore.YELLOW}[*]{Style.RESET_ALL} Timestamps:")
        for k, v in self.results["timestamps"].items():
            print(f"  {k.capitalize()}: {v}")

        print(f"\n{Fore.YELLOW}[*]{Style.RESET_ALL} Hashes:")
        for k, v in self.results["hashes"].items():
            print(f"  {k.upper()}: {v}")

        if self.results["pe_info"]:
            print(f"\n{Fore.YELLOW}[*]{Style.RESET_ALL} PE Information:")
            print(f"  Machine Type: {self.results['pe_info']['machine_type']}")
            print(f"  Timestamp: {self.results['pe_info']['timestamp']}")
            print(f"  Subsystem: {self.results['pe_info']['subsystem']}")

            print(f"\n{Fore.YELLOW}[*]{Style.RESET_ALL} Sections:")
            for section in self.results["pe_info"]["sections"]:
                print(f"  {section['name']}:")
                print(f"    Size: {section['size']}")
                print(f"    Entropy: {section['entropy']:.2f}")

        if self.results["pattern_matches"]:
            print(f"\n{Fore.YELLOW}[*]{Style.RESET_ALL} Suspicious Pattern Matches:")
            for match in self.results["pattern_matches"]:
                print(f"  {match}")


def print_banner():
    banner = f"""
{Fore.RED}
                                                         ...                                       
                                                  +%@@@@@@@@@@@@@*.                                
                                               #@@@@@@@@@@@@@@@@@@@@@:                             
                                             %@@@@@@@@@@@@@@@@@@@@@@@@@:                           
                                           .@@@@@@@@@@@@@@@@@@@@@@@@@@@@:                          
                                           :@@@@@@@@@@@@@@@@@@@@@@@@@@@@%                          
                                           =@@@@@@@@@@@@@@@@@@@@@@@@@@@@%                          
                                           :@@@@@@@@@@@@@@@@@@@@@@@@@@@@*                          
                                            #@@@%.     .@@@@+      #@@@%                           
                                             +@@=      .@@@@=      .@@#                            
                                              @@@@%%%@@@@%*@@@@%%%@@@@=                            
                                             .@@@@@@@@@@*  -@@@@@@@@@@=                            
                                           .    .::-@@@@@@@@@@@@+::.    .                          
                                         *@@@@#     @@@@@@@@@@@@-    +@@@@@.                       
                                         #@@@@@%    -%@@@@@@@@%=.   *@@@@@@:                       
                                       @@@@@@@@@@@@:            .#@@@@@@@@@@@-                     
                                       +@@@@@*#@@@@@@@@*:  .+@@@@@@@@%*%@@@@#                      
                                                    *@@@@@@@@@@%.                                  
                                        .==.    .+%@@@@@@@%@@@@@@@+:     :=:                       
                                       @@@@@@@@@@@@@@*.       :@@@@@@@@@@@@@@=                     
                                       -@@@@@@@@%=                :#@@@@@@@@*                      
                                         *@@@@@:                     %@@@@@:                       
                                         :%@@%.                       *@@@=   
{Style.RESET_ALL}"""
    print(banner)


def main():
    analyzer = MalwareAnalyzer()
    print_banner()

    file_path = input(f"\n{Fore.BLUE}[?]{Style.RESET_ALL} Enter file path to analyze: ")

    # Remove quotes from the path if present
    file_path = file_path.strip("\"'")

    if os.path.exists(file_path):
        start_time = time.time()
        analyzer.analyze_file(file_path)
        duration = time.time() - start_time

        analyzer.print_results()
        print(
            f"\n{Fore.GREEN}[+]{Style.RESET_ALL} Analysis completed in {duration:.2f} seconds"
        )
    else:
        print(f"{Fore.RED}[-]{Style.RESET_ALL} File not found")


if __name__ == "__main__":
    main()
